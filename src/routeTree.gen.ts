/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SsoCallbackRouteImport } from './routes/sso-callback'
import { Route as OurStoryRouteImport } from './routes/our-story'
import { Route as FundRouteImport } from './routes/fund'
import { Route as BlogsRouteImport } from './routes/blogs'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BlogsIndexRouteImport } from './routes/blogs.index'
import { Route as BlogsBlogIdRouteImport } from './routes/blogs.$blogId'

const SsoCallbackRoute = SsoCallbackRouteImport.update({
  id: '/sso-callback',
  path: '/sso-callback',
  getParentRoute: () => rootRouteImport,
} as any)
const OurStoryRoute = OurStoryRouteImport.update({
  id: '/our-story',
  path: '/our-story',
  getParentRoute: () => rootRouteImport,
} as any)
const FundRoute = FundRouteImport.update({
  id: '/fund',
  path: '/fund',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogsRoute = BlogsRouteImport.update({
  id: '/blogs',
  path: '/blogs',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogsIndexRoute = BlogsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlogsRoute,
} as any)
const BlogsBlogIdRoute = BlogsBlogIdRouteImport.update({
  id: '/$blogId',
  path: '/$blogId',
  getParentRoute: () => BlogsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blogs': typeof BlogsRouteWithChildren
  '/fund': typeof FundRoute
  '/our-story': typeof OurStoryRoute
  '/sso-callback': typeof SsoCallbackRoute
  '/blogs/$blogId': typeof BlogsBlogIdRoute
  '/blogs/': typeof BlogsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/fund': typeof FundRoute
  '/our-story': typeof OurStoryRoute
  '/sso-callback': typeof SsoCallbackRoute
  '/blogs/$blogId': typeof BlogsBlogIdRoute
  '/blogs': typeof BlogsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blogs': typeof BlogsRouteWithChildren
  '/fund': typeof FundRoute
  '/our-story': typeof OurStoryRoute
  '/sso-callback': typeof SsoCallbackRoute
  '/blogs/$blogId': typeof BlogsBlogIdRoute
  '/blogs/': typeof BlogsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blogs'
    | '/fund'
    | '/our-story'
    | '/sso-callback'
    | '/blogs/$blogId'
    | '/blogs/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/fund'
    | '/our-story'
    | '/sso-callback'
    | '/blogs/$blogId'
    | '/blogs'
  id:
    | '__root__'
    | '/'
    | '/blogs'
    | '/fund'
    | '/our-story'
    | '/sso-callback'
    | '/blogs/$blogId'
    | '/blogs/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogsRoute: typeof BlogsRouteWithChildren
  FundRoute: typeof FundRoute
  OurStoryRoute: typeof OurStoryRoute
  SsoCallbackRoute: typeof SsoCallbackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sso-callback': {
      id: '/sso-callback'
      path: '/sso-callback'
      fullPath: '/sso-callback'
      preLoaderRoute: typeof SsoCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/our-story': {
      id: '/our-story'
      path: '/our-story'
      fullPath: '/our-story'
      preLoaderRoute: typeof OurStoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fund': {
      id: '/fund'
      path: '/fund'
      fullPath: '/fund'
      preLoaderRoute: typeof FundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blogs': {
      id: '/blogs'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof BlogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blogs/': {
      id: '/blogs/'
      path: '/'
      fullPath: '/blogs/'
      preLoaderRoute: typeof BlogsIndexRouteImport
      parentRoute: typeof BlogsRoute
    }
    '/blogs/$blogId': {
      id: '/blogs/$blogId'
      path: '/$blogId'
      fullPath: '/blogs/$blogId'
      preLoaderRoute: typeof BlogsBlogIdRouteImport
      parentRoute: typeof BlogsRoute
    }
  }
}

interface BlogsRouteChildren {
  BlogsBlogIdRoute: typeof BlogsBlogIdRoute
  BlogsIndexRoute: typeof BlogsIndexRoute
}

const BlogsRouteChildren: BlogsRouteChildren = {
  BlogsBlogIdRoute: BlogsBlogIdRoute,
  BlogsIndexRoute: BlogsIndexRoute,
}

const BlogsRouteWithChildren = BlogsRoute._addFileChildren(BlogsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogsRoute: BlogsRouteWithChildren,
  FundRoute: FundRoute,
  OurStoryRoute: OurStoryRoute,
  SsoCallbackRoute: SsoCallbackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
